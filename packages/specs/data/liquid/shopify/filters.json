{
  "item_count_for_variant": {
    "summary": "Returns the total item count of a variant in the cart.",
    "expects": "cart",
    "description": "Returns the total item count of a variant in the cart.\n\n#### Example\n\n```liquid\n\n{{ cart | item_count_for_variant: 39888235757633 }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/item_count_for_variant)\n\n",
    "returns": "number",
    "scope": "cart"
  },
  "link_to_type": {
    "summary": "Generates an HTML `&lt;a&gt;` tag with an `href` attribute linking to a collection page that lists all products of the given\nproduct type.",
    "expects": "string",
    "description": "Generates an HTML `&lt;a&gt;` tag with an `href` attribute linking to a collection page that lists all products of the given\nproduct type.\n\n#### Example\n\n```liquid\n\n{{ 'Health' | link_to_type }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/link_to_type)\n\n",
    "returns": "string",
    "scope": "collection"
  },
  "link_to_vendor": {
    "summary": "Generates an HTML `&lt;a&gt;` tag with an `href` attribute linking to a collection page that lists all products of a given\nproduct vendor.",
    "expects": "string",
    "description": "Generates an HTML `&lt;a&gt;` tag with an `href` attribute linking to a collection page that lists all products of a given\nproduct vendor.\n\n#### Example\n\n```liquid\n\n{{ \"Polina's Potent Potions\" | link_to_vendor }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/link_to_vendor)\n\n",
    "returns": "string",
    "scope": "collection"
  },
  "sort_by": {
    "summary": "Generates a collection URL with the provided `sort_by` parameter appended. This filter must be applied to a collection URL.",
    "expects": "string",
    "description": "Generates a collection URL with the provided `sort_by` parameter appended. This filter must be applied to a collection URL. Accepts the following values:\n\n- `manual`\n- `best-selling`\n- `title-ascending`\n- `title-descending`\n- `price-ascending`\n- `price-descending`\n- `created-ascending`\n- `created-descending`\n\n**Tip**\n\n> You can append the `sort_by` filter to the [`url_for_type`](/docs/api/liquid/filters/url_for_type)\n> and [`url_for_vendor`](/docs/api/liquid/filters/url_for_vendor) filters.\n\n#### Example\n\n```liquid\n\n{{ collection.url | sort_by: 'best-selling' }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/sort_by)\n\n",
    "returns": "string",
    "scope": "collection"
  },
  "url_for_type": {
    "summary": "Generates a URL for a collection page that lists all products of the given product type.",
    "expects": "string",
    "description": "Generates a URL for a collection page that lists all products of the given product type.\n\n#### Example\n\n```liquid\n\n{{ 'health' | url_for_type }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/url_for_type)\n\n",
    "returns": "string",
    "scope": "collection"
  },
  "url_for_vendor": {
    "summary": "Generates a URL for a collection page that lists all products from the given product vendor.",
    "expects": "string",
    "description": "Generates a URL for a collection page that lists all products from the given product vendor.\n\n#### Example\n\n```liquid\n\n{{ \"Polina's Potent Potions\" | url_for_vendor }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/url_for_vendor)\n\n",
    "returns": "string",
    "scope": "collection"
  },
  "within": {
    "summary": "Generates a product URL within the context of the provided collection.",
    "expects": "string",
    "description": "Generates a product URL within the context of the provided collection. When the collection context is included, you can access the associated [`collection` object](/docs/api/liquid/objects/collection)\nin the [product template](/themes/architecture/templates/product).\n\n> Caution:\n> Because a standard product page and a product page in the context of a collection have the same content on separate\n> URLs, you should consider the SEO implications of using the `within` filter.\n\n#### Example\n\n```liquid\n\n{%- assign collection_product = collection.products.first -%}\n\n{{ collection_product.url | within: collection }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/within)\n\n",
    "returns": "string",
    "scope": "collection"
  },
  "brightness_difference": {
    "summary": "Calculates the [perceived brightness difference](https://www.w3.org/WAI/ER/WD-AERT/#color-contrast) between two colors.",
    "expects": "string",
    "description": "Calculates the [perceived brightness difference](https://www.w3.org/WAI/ER/WD-AERT/#color-contrast) between two colors. **Tip**\n\n> For accessibility best practices, it's recommended to have a minimum brightness difference of 125.\n\n#### Example\n\n```liquid\n\n{{ '#E800B0' | brightness_difference: '#FECEE9' }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/brightness_difference)\n\n",
    "returns": "number",
    "scope": "color"
  },
  "color_brightness": {
    "summary": "Calculates the [perceived brightness](https://www.w3.org/WAI/ER/WD-AERT/#color-contrast) of a given color.",
    "expects": "string",
    "description": "Calculates the [perceived brightness](https://www.w3.org/WAI/ER/WD-AERT/#color-contrast) of a given color.\n\n#### Example\n\n```liquid\n\n{{ '#EA5AB9' | color_brightness }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/color_brightness)\n\n",
    "returns": "number",
    "scope": "color"
  },
  "color_contrast": {
    "summary": "Calculates the contrast ratio between two colors and returns the ratio's numerator. The ratio's denominator, which isn't\nreturned, is always 1. For example, with a contrast ratio of 3.5:1, this filter returns 3.5.",
    "expects": "string",
    "description": "Calculates the contrast ratio between two colors and returns the ratio's numerator. The ratio's denominator, which isn't\nreturned, is always 1. For example, with a contrast ratio of 3.5:1, this filter returns 3.5. The order in which you specify the colors doesn't matter.\n\n**Tip**\n\n> For accessibility best practices, the\n> [WCAG 2.0 level AA](https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-visual-audio-contrast-contrast) requires a\n> minimum contrast ratio of 4.5:1 for normal text, and 3:1 for large text. [Level AAA](https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-visual-audio-contrast7)\n> requires a minimum contrast ratio of 7:1 for normal text, and 4.5:1 for large text.\n\n#### Example\n\n```liquid\n\n{{ '#E800B0' | color_contrast: '#D9D8FF' }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/color_contrast)\n\n",
    "returns": "number",
    "scope": "color"
  },
  "color_darken": {
    "summary": "Darkens a given color by a specific percentage. The percentage must be between 0 and 100.",
    "expects": "string",
    "description": "Darkens a given color by a specific percentage. The percentage must be between 0 and 100.\n\n#### Example\n\n```liquid\n\n{{ '#EA5AB9' | color_darken: 30 }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/color_darken)\n\n",
    "returns": "string",
    "scope": "color"
  },
  "color_desaturate": {
    "summary": "Desaturates a given color by a specific percentage. The percentage must be between 0 and 100.",
    "expects": "string",
    "description": "Desaturates a given color by a specific percentage. The percentage must be between 0 and 100.\n\n#### Example\n\n```liquid\n\n{{ '#EA5AB9' | color_desaturate: 30 }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/color_desaturate)\n\n",
    "returns": "string",
    "scope": "color"
  },
  "color_difference": {
    "summary": "Calculates the [color difference](https://www.w3.org/WAI/ER/WD-AERT/#color-contrast) between two colors.",
    "expects": "string",
    "description": "Calculates the [color difference](https://www.w3.org/WAI/ER/WD-AERT/#color-contrast) between two colors. **Tip**\n\n> For accessibility best practices, it's recommended to have a minimum color difference of 500.\n\n#### Example\n\n```liquid\n\n{{ '#720955' | color_difference: '#FFF3F9' }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/color_difference)\n\n",
    "returns": "number",
    "scope": "color"
  },
  "color_extract": {
    "summary": "Extracts a specific color component from a given color.",
    "expects": "string",
    "description": "Extracts a specific color component from a given color. Accepts the following color components:\n\n- `alpha`\n- `red`\n- `green`\n- `blue`\n- `hue`\n- `saturation`\n- `lightness`\n\n#### Example\n\n```liquid\n\n{{ '#EA5AB9' | color_extract: 'red' }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/color_extract)\n\n",
    "returns": "number",
    "scope": "color"
  },
  "color_lighten": {
    "summary": "Lightens a given color by a specific percentage. The percentage must be between 0 and 100.",
    "expects": "string",
    "description": "Lightens a given color by a specific percentage. The percentage must be between 0 and 100.\n\n#### Example\n\n```liquid\n\n{{ '#EA5AB9' | color_lighten: 30 }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/color_lighten)\n\n",
    "returns": "string",
    "scope": "color"
  },
  "color_mix": {
    "summary": "Blends two colors together by a specific percentage factor. The percentage must be between 0 and 100.",
    "expects": "string",
    "description": "Blends two colors together by a specific percentage factor. The percentage must be between 0 and 100. **Tip**\n\n> A percentage factor of 100 returns the color being filtered. A percentage factor of 0 returns the color\n> supplied to the filter.\n\n#### Example\n\n```liquid\n\n{{ '#E800B0' | color_mix: '#00936F', 50 }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/color_mix)\n\n",
    "returns": "string",
    "scope": "color"
  },
  "color_modify": {
    "summary": "Modifies a specific color component of a given color by a specific amount.",
    "expects": "string",
    "description": "Modifies a specific color component of a given color by a specific amount. The following table outlines valid color components, and the value range for their modifications:\n\n| Component | Value range |\n| --- | --- |\n| <ul><li>`red`</li><li>`green`</li><li>`blue`</li></ul> | An integer between 0 and 255 |\n| `alpha` | A decimal between 0 and 1 |\n| `hue` | An integer between 0 and 360 |\n| <ul><li>`saturation`<li>`lightness`</li></ul> | An integer between 0 and 100 |\n\n#### Example\n\n```liquid\n\n{{ '#EA5AB9' | color_modify: 'red', 255 }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/color_modify)\n\n",
    "returns": "string",
    "scope": "color"
  },
  "color_saturate": {
    "summary": "Saturates a given color by a specific percentage. The percentage must be between 0 and 100.",
    "expects": "string",
    "description": "Saturates a given color by a specific percentage. The percentage must be between 0 and 100.\n\n#### Example\n\n```liquid\n\n{{ '#EA5AB9' | color_saturate: 30 }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/color_saturate)\n\n",
    "returns": "string",
    "scope": "color"
  },
  "color_to_hex": {
    "summary": "Converts a CSS color string to hexadecimal format (`hex6`).",
    "expects": "string",
    "description": "Converts a CSS color string to hexadecimal format (`hex6`). Because colors are converted to `hex6` format, if a color with an alpha component is provided, then the alpha component\nis excluded from the output.\n\n#### Example\n\n```liquid\n\n{{ 'rgb(234, 90, 185)' | color_to_hex }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/color_to_hex)\n\n",
    "returns": "string",
    "scope": "color"
  },
  "color_to_hsl": {
    "summary": "Converts a CSS color string to `HSL` format.",
    "expects": "string",
    "description": "Converts a CSS color string to `HSL` format. If a color with an alpha component is provided, the color is converted to `HSLA` format.\n\n#### Example\n\n```liquid\n\n{{ '#EA5AB9' | color_to_hsl }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/color_to_hsl)\n\n",
    "returns": "string",
    "scope": "color"
  },
  "color_to_rgb": {
    "summary": "Converts a CSS color string to `RGB` format.",
    "expects": "string",
    "description": "Converts a CSS color string to `RGB` format. If a color with an alpha component is provided, then the color is converted to `RGBA` format.\n\n#### Example\n\n```liquid\n\n{{ '#EA5AB9' | color_to_rgb }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/color_to_rgb)\n\n",
    "returns": "string",
    "scope": "color"
  },
  "hex_to_rgba": {
    "summary": "Converts a CSS color string from  hexadecimal format to `RGBA` format. Shorthand hexadecimal formatting (`hex3`) is also accepted.",
    "expects": "string",
    "deprecated": true,
    "description": "⚠️ **DEPRECATED** ⚠️\n\nThe `hex_to_rgba` filter has been replaced by [`color_to_rgb`](/docs/api/liquid/filters/color_to_rgb) and\n[`color_modify`](/docs/api/liquid/filters/color_modify).\n\n---\n\nConverts a CSS color string from  hexadecimal format to `RGBA` format. Shorthand hexadecimal formatting (`hex3`) is also accepted.\n\n#### Example\n\n```liquid\n\n{{ '#EA5AB9' | hex_to_rgba }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/hex_to_rgba)\n\n",
    "returns": "string",
    "scope": "color"
  },
  "hmac_sha1": {
    "summary": "Converts a string into an SHA-1 hash using a hash message authentication code (HMAC).",
    "expects": "string",
    "description": "Converts a string into an SHA-1 hash using a hash message authentication code (HMAC). The secret key for the message is supplied as a parameter to the filter.\n\n#### Example\n\n```liquid\n\n{%- assign secret_potion = 'Polyjuice' | hmac_sha1: 'Polina' -%}\n\nMy secret potion: {{ secret_potion }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/hmac_sha1)\n\n",
    "returns": "string"
  },
  "hmac_sha256": {
    "summary": "Converts a string into an SHA-256 hash using a hash message authentication code (HMAC).",
    "expects": "string",
    "description": "Converts a string into an SHA-256 hash using a hash message authentication code (HMAC). The secret key for the message is supplied as a parameter to the filter.\n\n#### Example\n\n```liquid\n\n{%- assign secret_potion = 'Polyjuice' | hmac_sha256: 'Polina' -%}\n\nMy secret potion: {{ secret_potion }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/hmac_sha256)\n\n",
    "returns": "string"
  },
  "md5": {
    "summary": "Converts a string into an MD5 hash.",
    "expects": "string",
    "description": "Converts a string into an MD5 hash.\n\n#### Example\n\n```liquid\n\n{{ '' | md5 }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/md5)\n\n",
    "returns": "string"
  },
  "sha1": {
    "summary": "Converts a string into an SHA-1 hash.",
    "expects": "string",
    "description": "Converts a string into an SHA-1 hash.\n\n#### Example\n\n```liquid\n\n{%- assign secret_potion = 'Polyjuice' | sha1 -%}\n\nMy secret potion: {{ secret_potion }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/sha1)\n\n",
    "returns": "string"
  },
  "sha256": {
    "summary": "Converts a string into an SHA-256 hash.",
    "expects": "string",
    "description": "Converts a string into an SHA-256 hash.\n\n#### Example\n\n```liquid\n\n{%- assign secret_potion = 'Polyjuice' | sha256 -%}\n\nMy secret potion: {{ secret_potion }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/sha256)\n\n",
    "returns": "string"
  },
  "currency_selector": {
    "summary": "Generates an HTML `&lt;select&gt;` element with an option for each currency available on the store.",
    "expects": "form",
    "deprecated": true,
    "description": "⚠️ **DEPRECATED** ⚠️\n\nDeprecated without a direct replacement because the [currency form](/docs/api/liquid/tags/form#form-currency) has also been\ndeprecated.\n\n---\n\nGenerates an HTML `&lt;select&gt;` element with an option for each currency available on the store. The `currency_selector` filter must be applied to the [`form` object](/docs/api/liquid/objects/form) within a\n[currency form](/docs/api/liquid/tags/form#form-currency).\n\n#### Example\n\n```liquid\n\n{% form 'currency' %}\n  {{ form | currency_selector }}\n{% endform %}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/currency_selector)\n\n",
    "returns": "string",
    "scope": "localization"
  },
  "customer_login_link": {
    "summary": "Generates an HTML link to the customer login page.",
    "expects": "string",
    "description": "Generates an HTML link to the customer login page.\n\n#### Example\n\n```liquid\n\n{{ 'Log in' | customer_login_link }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/customer_login_link)\n\n",
    "returns": "string",
    "scope": "customer"
  },
  "customer_logout_link": {
    "summary": "Generates an HTML link to log the customer out of their account and redirect to the homepage.",
    "expects": "string",
    "description": "Generates an HTML link to log the customer out of their account and redirect to the homepage.\n\n#### Example\n\n```liquid\n\n{{ 'Log out' | customer_logout_link }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/customer_logout_link)\n\n",
    "returns": "string",
    "scope": "customer"
  },
  "customer_register_link": {
    "summary": "Generates an HTML link to the customer registration page.",
    "expects": "string",
    "description": "Generates an HTML link to the customer registration page.\n\n#### Example\n\n```liquid\n\n{{ 'Create an account' | customer_register_link }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/customer_register_link)\n\n",
    "returns": "string",
    "scope": "customer"
  },
  "font_face": {
    "summary": "Generates a CSS [`@font_face` declaration](https://developer.mozilla.org/en-US/docs/Web/CSS/%40font-face) to load the provided font.",
    "expects": "font",
    "description": "Generates a CSS [`@font_face` declaration](https://developer.mozilla.org/en-US/docs/Web/CSS/%40font-face) to load the provided font.\n\n#### Example\n\n```liquid\n\n{{ settings.type_header_font | font_face }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/font_face)\n\n",
    "returns": "string",
    "scope": "font"
  },
  "font_modify": {
    "summary": "Modifies a specific property of a given font.",
    "expects": "font",
    "description": "Modifies a specific property of a given font. The `font_modify` filter requires two parameters. The first indicates which property should be modified and the second is\neither the new value, or modification amount, for that property.\n\n**Tip**\n\n> You can access every variant of the chosen font's family by using [`font.variants`](/docs/api/liquid/objects/font#font-variants).\n> However, you can more easily access specific styles and weights by using the `font_modify` filter.\n\nThe following table outlines the valid font properties and modification values:\n\n<table>\n  <thead>\n    <th>Property</th>\n    <th>Modification value</th>\n    <th>Output</th>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=3><code>style</code></td>\n      <td><code>normal</code></td>\n      <td>Returns the normal variant of the same weight, if it exists.</td>\n    </tr>\n    <tr>\n      <td><code>italic</code></td>\n      <td>Returns the italic variant of the same weight, if it exists.</td>\n    </tr>\n    <tr>\n      <td><code>oblique</code></td>\n      <td>\n        <p>Returns the oblique variant of the same weight, if it exists.</p>\n        <p>Oblique variants are similar to italic variants in appearance. All Shopify fonts have only oblique or italic variants, not both.</p>\n      </td>\n    </tr>\n    <tr>\n      <td rowspan=7><code>weight</code></td>\n      <td><code>100</code> &rarr; <code>900</code></td>\n      <td>Returns a variant of the same style with the given weight, if it exists.</td>\n    </tr>\n    <tr>\n      <td><code>normal</code></td>\n      <td>Returns a variant of the same style with a weight of <code>400</code>, if it exists.</td>\n    </tr>\n    <tr>\n      <td><code>bold</code></td>\n      <td>Returns a variant of the same style with a weight of <code>700</code>, if it exists.</td>\n    </tr>\n    <tr>\n      <td><code>+100</code> &rarr; <code>+900</code></td>\n      <td>\n        <p>Returns a variant of the same style with a weight incremented by the given value, if it exists.</p>\n        <p>For example, if a font has a weight of <code>400</code>, then using <code>+100</code> would return the font with a weight of <code>500</code>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>-100</code> &rarr; <code>-900</code></td>\n      <td>\n        <p>Returns a variant of the same style with a weight decremented by the given value, if it exists.</p>\n        <p>For example, if a font has a weight of <code>400</code>, then using <code>-100</code> would return the font with a weight of <code>300</code>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>lighter</code></td>\n      <td>Returns a lighter variant of the same style by applying the rules used by the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Meaning_of_relative_weights\">CSS <code>font-weight</code> property</a> and browser <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights\">fallback weights</a>, if it exists.</td>\n    </tr>\n    <tr>\n      <td><code>bolder</code></td>\n      <td>Returns a bolder variant of the same style by applying the rules used by the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Meaning_of_relative_weights\">CSS <code>font-weight</code> property</a> and browser <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights\">fallback weights</a>, if it exists.</td>\n    </tr>\n  </tbody>\n</table>\n\n#### Example\n\n```liquid\n\n{%- assign bold_font = settings.type_body_font | font_modify: 'weight', 'bold' -%}\n\nh2 {\n  font-weight: {{ bold_font.weight }};\n}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/font_modify)\n\n",
    "returns": "any",
    "scope": "font"
  },
  "font_url": {
    "summary": "Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for the provided font in `woff2` format.",
    "expects": "font",
    "description": "Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for the provided font in `woff2` format.\n\n#### Example\n\n```liquid\n\n{{ settings.type_header_font | font_url }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/font_url)\n\n",
    "returns": "string",
    "scope": "font"
  },
  "default_errors": {
    "summary": "Generates default error messages for each possible value of [`form.errors`](/docs/themes/liquid/reference/objects/form#form-errors).",
    "expects": "string",
    "description": "Generates default error messages for each possible value of [`form.errors`](/docs/themes/liquid/reference/objects/form#form-errors).\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/default_errors)\n\n",
    "returns": "string",
    "scope": "default"
  },
  "payment_button": {
    "summary": "Generates an HTML container to host [dynamic checkout buttons](https://help.shopify.com/manual/online-store/dynamic-checkout)\nfor a product. The `payment_button` filter must be used on the `form` object within a [product form](/docs/api/liquid/tags/form#form-product).",
    "expects": "form",
    "description": "Generates an HTML container to host [dynamic checkout buttons](https://help.shopify.com/manual/online-store/dynamic-checkout)\nfor a product. The `payment_button` filter must be used on the `form` object within a [product form](/docs/api/liquid/tags/form#form-product). **Note**\n\n> You can't render dynamic checkout buttons through AJAX requests, including those through the\n> [Section Rendering API](/api/section-rendering). The dynamic checkout buttons are added by JavaScript included\n> by Shopify through the [`content_for_header`](/docs/api/liquid/objects/content_for_header) object, which only runs on\n> the initial page load.\n\n#### Example\n\n```liquid\n\n{% form 'product', product %}\n  {{ form | payment_button }}\n{% endform %}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/payment_button)\n\n",
    "returns": "string",
    "scope": "payment"
  },
  "payment_terms": {
    "summary": "Generates the HTML for the [Shop Pay Installments banner](/themes/pricing-payments/installments).",
    "expects": "form",
    "description": "Generates the HTML for the [Shop Pay Installments banner](/themes/pricing-payments/installments). The `payment_terms` filter must be used on the `form` object within a [product form](/docs/api/liquid/tags/form#form-product) or\n[cart form](/docs/api/liquid/tags/form#form-cart).\n\n```liquid\n{% form 'product', product %}\n  {{ form | payment_terms }}\n{% endform %}\n```\n\n```liquid\n{% form 'cart', cart %}\n  {{ form | payment_terms }}\n{% endform %}\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/payment_terms)\n\n",
    "returns": "string",
    "scope": "payment"
  },
  "time_tag": {
    "summary": "Converts a timestamp into an HTML `&lt;time&gt;` tag.",
    "expects": "string",
    "description": "Converts a timestamp into an HTML `&lt;time&gt;` tag. The `time_tag` filter accepts the same parameters as Ruby's strftime method for formatting the date. For a list of shorthand\nformats, refer to the [Ruby documentation](https://ruby-doc.org/core-3.1.1/Time.html#method-i-strftime) or\n[strftime reference and sandbox](http://www.strfti.me/).\n\n#### Example\n\n```liquid\n\n{{ article.created_at | time_tag: '%B %d, %Y' }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/time_tag)\n\n",
    "returns": "string",
    "scope": "html"
  },
  "translate": {
    "summary": "Returns a string of translated text for a given translation key from a [locale file](/themes/architecture/locales).",
    "expects": "string",
    "description": "Returns a string of translated text for a given translation key from a [locale file](/themes/architecture/locales). The `translate` filter has an alias of `t`, which is more commonly used.\n\n**Tip**\n\n> To learn more about using the `t` filter, refer to [storefront locale file usage](/themes/architecture/locales/storefront-locale-files#usage)\n> or [schema locale file usage](/themes/architecture/locales/schema-locale-files#usage).\n\n#### Example\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/translate)\n\n",
    "returns": "string",
    "scope": "localization"
  },
  "json": {
    "summary": "Converts a string, or object, into JSON format.",
    "expects": "variable",
    "description": "Converts a string, or object, into JSON format. **Tip**\n\n> When using the JSON output in JavaScript, you don't need to wrap it in quotes because the `json` filter includes them.\n> The `json` filter also escapes any quotes inside the output.\n\n#### Product inventory\n\nWhen applied to a [`product` object](/docs/api/liquid/objects/product) on any Shopify store created after December 5, 2017, the\n`json` filter doesn't output values for the `inventory_quantity` and `inventory_policy` properties of any associated\n[variants](/docs/api/liquid/objects/variant). These properties are excluded to help prevent bots and crawlers from retrieving\ninventory quantities for stores to which they aren't granted access.\n\nIf you need inventory information, you can access it through individual variants.\n\n#### Example\n\n```liquid\n\n{{ product | json }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/json)\n\n",
    "returns": "string",
    "scope": "format"
  },
  "base64_decode": {
    "summary": "Decodes a string in [Base64 format](https://developer.mozilla.org/en-US/docs/Glossary/Base64).",
    "expects": "string",
    "description": "Decodes a string in [Base64 format](https://developer.mozilla.org/en-US/docs/Glossary/Base64).\n\n#### Example\n\n```liquid\n\n{{ 'b25lIHR3byB0aHJlZQ==' | base64_decode }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/base64_decode)\n\n",
    "returns": "string"
  },
  "base64_encode": {
    "summary": "Encodes a string to [Base64 format](https://developer.mozilla.org/en-US/docs/Glossary/Base64).",
    "expects": "string",
    "description": "Encodes a string to [Base64 format](https://developer.mozilla.org/en-US/docs/Glossary/Base64).\n\n#### Example\n\n```liquid\n\n{{ 'one two three' | base64_encode }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/base64_encode)\n\n",
    "returns": "string"
  },
  "base64_url_safe_decode": {
    "summary": "Decodes a string in URL-safe [Base64 format](https://developer.mozilla.org/en-US/docs/Glossary/Base64).",
    "expects": "string",
    "description": "Decodes a string in URL-safe [Base64 format](https://developer.mozilla.org/en-US/docs/Glossary/Base64).\n\n#### Example\n\n```liquid\n\n{{ 'b25lIHR3byB0aHJlZQ==' | base64_url_safe_decode }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/base64_url_safe_decode)\n\n",
    "returns": "string"
  },
  "base64_url_safe_encode": {
    "summary": "Encodes a string to URL-safe [Base64 format](https://developer.mozilla.org/en-US/docs/Glossary/Base64).",
    "expects": "string",
    "description": "Encodes a string to URL-safe [Base64 format](https://developer.mozilla.org/en-US/docs/Glossary/Base64).\n\n#### Example\n\nTo produce URL-safe Base64, this filter uses `-` and `_` in place of `+` and `/`.\n\n```liquid\n\n{{ 'one two three' | base64_url_safe_encode }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/base64_url_safe_encode)\n\n",
    "returns": "string"
  },
  "remove_last": {
    "summary": "Removes the last instance of a substring inside a string.",
    "expects": "string",
    "description": "Removes the last instance of a substring inside a string.\n\n#### Example\n\n```liquid\n\n{{ \"I hate it when I accidentally spill my duplication potion accidentally!\" | remove_last: ' accidentally' }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/remove_last)\n\n",
    "returns": "string"
  },
  "replace_last": {
    "summary": "Replaces the last instance of a substring inside a string with a given string.",
    "expects": "string",
    "description": "Replaces the last instance of a substring inside a string with a given string.\n\n#### Example\n\n```liquid\n\n{{ product.handle | replace_last: '-', ' ' }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/replace_last)\n\n",
    "returns": "string"
  },
  "external_video_tag": {
    "summary": "Generates an HTML `&lt;iframe&gt;` tag containing the player for a given external video. The input for the `external_video_tag`\nfilter can be either a [`media` object](/docs/api/liquid/objects/media) or [`external_video_url`](/docs/api/liquid/filters/external_video_url).",
    "expects": "variable",
    "description": "Generates an HTML `&lt;iframe&gt;` tag containing the player for a given external video. The input for the `external_video_tag`\nfilter can be either a [`media` object](/docs/api/liquid/objects/media) or [`external_video_url`](/docs/api/liquid/filters/external_video_url). If [alt text is set on the video](https://help.shopify.com/en/manual/products/product-media/add-alt-text), then it's\nincluded in the `title` attribute of the `<iframe>`. If no alt text is set, then the `title` attribute is set to the\nproduct title.\n\n#### Example\n\n```liquid\n\n{% for media in product.media %}\n  {% if media.media_type == 'external_video' %}\n    {% if media.host == 'youtube' %}\n      {{ media | external_video_url: color: 'white' | external_video_tag }}\n    {% elsif media.host == 'vimeo' %}\n      {{ media | external_video_url: loop: '1', muted: '1' | external_video_tag }}\n    {% endif %}\n  {% endif %}\n{% endfor %}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/external_video_tag)\n\n",
    "returns": "string",
    "scope": "media"
  },
  "external_video_url": {
    "summary": "Returns the URL for a given external video. Use this filter to specify parameters for the external video player generated\nby the [`external_video_tag` filter](/docs/api/liquid/filters/external_video_tag).",
    "expects": "media",
    "description": "Returns the URL for a given external video. Use this filter to specify parameters for the external video player generated\nby the [`external_video_tag` filter](/docs/api/liquid/filters/external_video_tag).\n\n#### Example\n\nYou can specify [YouTube](https://developers.google.com/youtube/player_parameters#Parameters) and [Vimeo](https://vimeo.zendesk.com/hc/en-us/articles/360001494447-Using-Player-Parameters) video parameters by adding a parameter that matches the parameter name, and the desired value.\n\n\n```liquid\n\n{% for media in product.media %}\n  {% if media.media_type == 'external_video' %}\n    {% if media.host == 'youtube' %}\n      {{ media | external_video_url: color: 'white' | external_video_tag }}\n    {% elsif media.host == 'vimeo' %}\n      {{ media | external_video_url: loop: '1', muted: '1' | external_video_tag }}\n    {% endif %}\n  {% endif %}\n{% endfor %}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/external_video_url)\n\n",
    "returns": "string",
    "scope": "media"
  },
  "image_tag": {
    "summary": "Generates an HTML `&lt;img&gt;` tag for a given [`image_url`](/docs/api/liquid/filters/image_url).",
    "expects": "string",
    "description": "Generates an HTML `&lt;img&gt;` tag for a given [`image_url`](/docs/api/liquid/filters/image_url). By default, `width` and `height` attributes are added to the `<img>` tag based on the dimensions and aspect ratio from\nthe image URL. However, you can override these attributes with the [width](/docs/api/liquid/filters/image_tag#image_tag-width) and [height](/docs/api/liquid/filters/image_tag#image_tag-height)\nparameters. If only one parameter is provided, then only that attribute is added.\n\n**Note**\n\n> This filter automatically applies the `object-position` css style from the focal point value if set. For more\n> information, refer to the [`focal_point` object](/docs/api/liquid/objects/focal_point).\n\n#### Example\n\n```liquid\n\n{{ product | image_url: width: 200 | image_tag }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/image_tag)\n\n",
    "returns": "string",
    "scope": "media"
  },
  "media_tag": {
    "summary": "Generates an appropriate HTML tag for a given media object.",
    "expects": "media",
    "description": "Generates an appropriate HTML tag for a given media object.\n\n#### Example\n\n```liquid\n\n{% for media in product.media %}\n  {{- media | media_tag }}\n{% endfor %}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/media_tag)\n\n",
    "returns": "string",
    "scope": "media"
  },
  "model_viewer_tag": {
    "summary": "Generates a [Google model viewer component](https://modelviewer.dev/) for a given 3D model.",
    "expects": "media",
    "description": "Generates a [Google model viewer component](https://modelviewer.dev/) for a given 3D model.\n\n#### Example\n\n```liquid\n\n{% for media in product.media %}\n  {% if media.media_type == 'model' %}\n    {{ media | model_viewer_tag }}\n  {% endif %}\n{% endfor %}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/model_viewer_tag)\n\n",
    "returns": "string",
    "scope": "media"
  },
  "video_tag": {
    "summary": "Generates an HTML `&lt;video&gt;` tag for a given video.",
    "expects": "media",
    "description": "Generates an HTML `&lt;video&gt;` tag for a given video. **Note**\n\n> When `mp4` videos are uploaded, Shopify generates an `m3u8` file as an additional [`video_source`](/docs/api/liquid/objects/video_source).\n> An `m3u8` file enables video players to leverage [HTTP live streaming (HLS)](https://developer.apple.com/streaming/),\n> resulting in an optimized video experience based on the user's internet connection. If loop is enabled, the HLS source is not used\n> in order to allow progessive download to cache the video.\n>\n> If the `m3u8` source isn't supported, then the player falls back to the `mp4` source.\n\n#### Example\n\n```liquid\n\n{% for media in product.media %}\n  {% if media.media_type == 'video' %}\n    {{ media | video_tag }}\n  {% endif %}\n{% endfor %}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/video_tag)\n\n",
    "returns": "string",
    "scope": "media"
  },
  "metafield_tag": {
    "summary": "Generates an HTML element to host the metafield data. The type of element that's generated differs depending on the\ntype of metafield.",
    "expects": "metafield",
    "description": "Generates an HTML element to host the metafield data. The type of element that's generated differs depending on the\ntype of metafield. **Note**\n\n> The `metafield_tag` filter doesn't support list metafields other than `list.single_line_text_field`.\n\n#### Example\n\nMost metafield types return a simple HTML element:\n\n| Type | Element | Attributes |\n| --- | --- | --- |\n| `boolean` | `<span>` | `class=\"metafield-boolean\"` |\n| `collection_reference` | `<a>` | `class=\"metafield-collection_reference\"` |\n| `color` | `<span>` | `class=\"metafield-color\"` |\n| `date` | `<time>` | `datetime=\"<the metafield value>\"`<br><br>`class=\"metafield-date\"`<br><br>Value is localized to the customer |\n| `date_time` | `<time>` | `datetime=\"<the metafield value>\"`<br><br>`class=\"metafield-date\"`<br><br>Value is localized to the customer |\n| `json` | `<script>` | `type=\"application/json\"`<br><br>`class=\"metafield-json\"` |\n| `money` | `<span>` | `class=\"metafield-money\"`<br><br>Value is formatted using the store's [HTML with currency setting](https://help.shopify.com/manual/payments/currency-formatting) |\n| `multi_line_text_field` | `<span>` | `class=\"metafield-multi_line_text_field\"` |\n| `number_decimal` | `<span>` | `class=\"metafield-number_decimal\"` |\n| `number_integer` | `<span>` | `class=\"metafield-number_integer\"` |\n| `page_reference` | `<a>` | `class=\"metafield-page_reference\"` |\n| `product_reference` | `<a>` | `class=\"metafield-page_reference\"` |\n| `rating` | `<span>` | `class=\"metafield-rating\"` | |\n| `single_line_text_field` | `<span>` | `class=\"metafield-single_line_text_field\"` |\n| `url` | `<a>` | `class=\"metafield-url\"` |\n| `variant_reference` | `<a>` | `class=\"metafield-variant_reference\"` |\n| `rich_text_field` | <div> | `class=\"metafield-rich_text_field\"` |\n\n\n```liquid\n\n<!-- boolean -->\n{{ product.metafields.information.seasonal | metafield_tag }}\n\n<!-- collection_reference -->\n{{ product.metafields.information.related_collection | metafield_tag }}\n\n<!-- color -->\n{{ product.metafields.details.potion_color | metafield_tag }}\n\n<!-- date -->\n{{ product.metafields.information.expiry | metafield_tag }}\n\n<!-- date_time -->\n{{ product.metafields.information.brew_date | metafield_tag }}\n\n<!-- json -->\n{{ product.metafields.information.burn_temperature | metafield_tag }}\n\n<!-- money -->\n{{ product.metafields.details.price_per_ml | metafield_tag }}\n\n<!-- multi_line_text_field -->\n{{ product.metafields.information.shipping | metafield_tag }}\n\n<!-- number_decimal -->\n{{ product.metafields.information.salinity | metafield_tag }}\n\n<!-- number_integer -->\n{{ product.metafields.information.doses_per_day | metafield_tag }}\n\n<!-- page_reference -->\n{{ product.metafields.information.dosage | metafield_tag }}\n\n<!-- product_reference -->\n{{ product.metafields.information.related_product | metafield_tag }}\n\n<!-- rating -->\n{{ product.metafields.details.rating | metafield_tag }}\n\n<!-- single_line_text_field -->\n{{ product.metafields.information.directions | metafield_tag }}\n\n<!-- url -->\n{{ product.metafields.information.health | metafield_tag }}\n\n<!-- variant_reference -->\n{{ product.metafields.information.health | metafield_tag }}\n\n<!-- rich_text_field -->\n{{ product.metafields.information.rich_description | metafield_tag }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/metafield_tag)\n\n",
    "returns": "string",
    "scope": "metafield"
  },
  "metafield_text": {
    "summary": "Generates a text version of the metafield data.",
    "expects": "metafield",
    "description": "Generates a text version of the metafield data. The following outlines the output for each metafield type:\n\n| Metafield type | Output |\n| --- | --- |\n| `single_line_text_field` | The metafield text |\n| `multi_line_text_field` | The metafield text |\n| `page_reference` | The page title |\n| `product_reference` | The product title |\n| `collection_reference` | The collection title |\n| `variant_reference` | The variant title |\n| `file_reference` | The file URL |\n| `number_integer` | The number |\n| `number_decimal` | The number |\n| `date` | The date |\n| `date-time` | The date and time |\n| `url` | The URL |\n| `json` | The JSON |\n| `boolean` | The boolean value |\n| `color` | The color value |\n| `weight` | The weight value and unit |\n| `volume` | The volume value and unit |\n| `dimension` | The dimension value and unit |\n| `rating` | The rating value |\n| `list.single_line_text_field` | The metafield values converted to a sentence.<br><br>For example, if you had the values `Toronto`, `Ottawa`, and `Vancouver`, then the output would be:<br><br>`Toronto, Ottawa, and Vancouver` |\n| `money` | The money value, formatted using the store's [**HTML with currency** setting](https://help.shopify.com/manual/payments/currency-formatting). |\n| `rich_text_field` | The rich text value as simple text |\n\n#### Example\n\n```liquid\n\n{{ product.metafields.information.dosage | metafield_text }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/metafield_text)\n\n",
    "returns": "string",
    "scope": "metafield"
  },
  "money": {
    "summary": "Formats a given price based on the store's [**HTML without currency** setting](https://help.shopify.com/manual/payments/currency-formatting).",
    "expects": "number",
    "description": "Formats a given price based on the store's [**HTML without currency** setting](https://help.shopify.com/manual/payments/currency-formatting).\n\n#### Example\n\n```liquid\n\n{{ product.price | money }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/money)\n\n",
    "returns": "string",
    "scope": "money"
  },
  "money_with_currency": {
    "summary": "Formats a given price based on the store's [**HTML with currency** setting](https://help.shopify.com/manual/payments/currency-formatting).",
    "expects": "number",
    "description": "Formats a given price based on the store's [**HTML with currency** setting](https://help.shopify.com/manual/payments/currency-formatting).\n\n#### Example\n\n```liquid\n\n{{ product.price | money_with_currency }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/money_with_currency)\n\n",
    "returns": "string",
    "scope": "money"
  },
  "money_without_currency": {
    "summary": "Formats a given price based on the store's [**HTML without currency** setting](https://help.shopify.com/manual/payments/currency-formatting), without the currency symbol.",
    "expects": "number",
    "description": "Formats a given price based on the store's [**HTML without currency** setting](https://help.shopify.com/manual/payments/currency-formatting), without the currency symbol.\n\n#### Example\n\n```liquid\n\n{{ product.price | money_without_currency }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/money_without_currency)\n\n",
    "returns": "string",
    "scope": "money"
  },
  "money_without_trailing_zeros": {
    "summary": "Formats a given price based on the store's [**HTML without currency** setting](https://help.shopify.com/manual/payments/currency-formatting), excluding the decimal separator\n(either `.` or `,`) and trailing zeros.\n\nIf the price has a non-zero decimal value, then the output is the same as the [`money` filter](/docs/api/liquid/filters#money).",
    "expects": "number",
    "description": "Formats a given price based on the store's [**HTML without currency** setting](https://help.shopify.com/manual/payments/currency-formatting), excluding the decimal separator\n(either `.` or `,`) and trailing zeros.\n\nIf the price has a non-zero decimal value, then the output is the same as the [`money` filter](/docs/api/liquid/filters#money).\n\n#### Example\n\n```liquid\n\n{{ product.price | money_without_trailing_zeros }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/money_without_trailing_zeros)\n\n",
    "returns": "string",
    "scope": "money"
  },
  "default_pagination": {
    "summary": "Generates HTML for a set of links for paginated results. Must be applied to the [`paginate` object](/docs/api/liquid/objects/paginate).",
    "expects": "paginate",
    "description": "Generates HTML for a set of links for paginated results. Must be applied to the [`paginate` object](/docs/api/liquid/objects/paginate).\n\n#### Example\n\n```liquid\n\n{% paginate collection.products by 2 %}\n  {% for product in collection.products %}\n    {{- product.title }} product card\n  {% endfor %}\n\n  {{- paginate | default_pagination -}}\n{% endpaginate %}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/default_pagination)\n\n",
    "returns": "string",
    "scope": "default"
  },
  "login_button": {
    "summary": "Generates an HTML Button that enables a customer to follow the Shop in the Shop App",
    "expects": "shop",
    "description": "Generates an HTML Button that enables a customer to follow the Shop in the Shop App Configure the storefront for Follow on Shop. [Learn more](https://help.shopify.com/manual/online-store/themes/customizing-themes/follow-on-shop)\n\n**Note**\n\n> The presence of the [Shop](/docs/api/liquid/objects/shop) object\n> is required for validation purposes only.\n\n**Note**\n\n> The `action` specified is always `'follow'`. If this parameter is not supplied the button will not render.\n\n```liquid\n{{ shop | login_button: action: 'follow' }}\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/login_button)\n\n",
    "returns": "string",
    "scope": "customer"
  },
  "camelize": {
    "summary": "Converts a string to CamelCase.",
    "expects": "string",
    "description": "Converts a string to CamelCase.\n\n#### Example\n\n```liquid\n\n{{ 'variable-name' | camelize }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/camelize)\n\n",
    "returns": "string"
  },
  "handleize": {
    "summary": "Converts a string into a [handle](/docs/api/liquid/basics#handles).",
    "expects": "string",
    "description": "Converts a string into a [handle](/docs/api/liquid/basics#handles). **Note**\n\n> The `handleize` filter has an alias of `handle`.\n\n#### Example\n\n```liquid\n\n{{ product.title | handleize }}\n{{ product.title | handle }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/handleize)\n\n",
    "returns": "string"
  },
  "url_escape": {
    "summary": "Escapes any URL-unsafe characters in a string.",
    "expects": "string",
    "description": "Escapes any URL-unsafe characters in a string.\n\n#### Example\n\n```liquid\n\n{{ '<p>Health & Love potions</p>' | url_escape }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/url_escape)\n\n",
    "returns": "string"
  },
  "url_param_escape": {
    "summary": "Escapes any characters in a string that are unsafe for URL parameters.",
    "expects": "string",
    "description": "Escapes any characters in a string that are unsafe for URL parameters. The `url_param_escape` filter escapes the same characters as [`url_escape`](/docs/api/liquid/filters/url_escape), with the\naddition of `&`.\n\n#### Example\n\n```liquid\n\n{{ '<p>Health & Love potions</p>' | url_param_escape }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/url_param_escape)\n\n",
    "returns": "string"
  },
  "highlight_active_tag": {
    "summary": "Wraps a given tag in an HTML `&lt;span&gt;` tag, with a `class` attribute of `active`, if the tag is currently active. Only\napplies to collection tags.",
    "expects": "string",
    "description": "Wraps a given tag in an HTML `&lt;span&gt;` tag, with a `class` attribute of `active`, if the tag is currently active. Only\napplies to collection tags.\n\n#### Example\n\n```liquid\n\n{% for tag in collection.all_tags %}\n  {{- tag | highlight_active_tag | link_to_tag: tag }}\n{% endfor %}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/highlight_active_tag)\n\n",
    "returns": "string",
    "scope": "collection"
  },
  "link_to_add_tag": {
    "summary": "Generates an HTML `&lt;a&gt;` tag with an `href` attribute linking to the current blog or collection, filtered to show\nonly articles or products that have a given tag, as well as any currently active tags.",
    "expects": "string",
    "description": "Generates an HTML `&lt;a&gt;` tag with an `href` attribute linking to the current blog or collection, filtered to show\nonly articles or products that have a given tag, as well as any currently active tags. **Tip**\n\n> To learn more about filtering by tag, refer to [Filter articles by tag](/themes/architecture/templates/blog#filter-articles-by-tag)\n> or [Filter collections by tag](/themes/navigation-search/filtering/tag-filtering).\n\n#### Example\n\n```liquid\n\n{% for tag in collection.all_tags %}\n  {%- if current_tags contains tag -%}\n    {{ tag }}\n  {%- else -%}\n    {{ tag | link_to_add_tag: tag }}\n  {%- endif -%}\n{% endfor %}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/link_to_add_tag)\n\n",
    "returns": "string",
    "scope": "tag"
  },
  "link_to_remove_tag": {
    "summary": "Generates an HTML `&lt;a&gt;` tag with an `href` attribute linking to the current blog or collection, filtered to show\nonly articles or products that have any currently active tags, except the provided tag.",
    "expects": "string",
    "description": "Generates an HTML `&lt;a&gt;` tag with an `href` attribute linking to the current blog or collection, filtered to show\nonly articles or products that have any currently active tags, except the provided tag. **Tip**\n\n> To learn more about filtering by tag, refer to [Filter articles by tag](/themes/architecture/templates/blog#filter-articles-by-tag)\n> or [Filter collections by tag](/themes/navigation-search/filtering/tag-filtering).\n\n#### Example\n\n```liquid\n\n{% for tag in collection.all_tags %}\n  {%- if current_tags contains tag -%}\n    {{ tag | link_to_remove_tag: tag }}\n  {%- else -%}\n    {{ tag | link_to_add_tag: tag }}\n  {%- endif -%}\n{% endfor %}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/link_to_remove_tag)\n\n",
    "returns": "string",
    "scope": "tag"
  },
  "link_to_tag": {
    "summary": "Generates an HTML `&lt;a&gt;` tag with an `href` attribute linking to the current blog or collection, filtered to show\nonly articles or products that have a given tag.",
    "expects": "string",
    "description": "Generates an HTML `&lt;a&gt;` tag with an `href` attribute linking to the current blog or collection, filtered to show\nonly articles or products that have a given tag. **Tip**\n\n> To learn more about filtering by tag, refer to [Filter articles by tag](/themes/architecture/templates/blog#filter-articles-by-tag)\n> or [Filter collections by tag](/themes/navigation-search/filtering/tag-filtering).\n\n#### Example\n\n```liquid\n\n{% for tag in collection.all_tags %}\n  {{- tag | link_to_tag: tag }}\n{% endfor %}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/link_to_tag)\n\n",
    "returns": "string",
    "scope": "tag"
  },
  "format_address": {
    "summary": "Generates an HTML address display, with each address component ordered according to the address's locale.",
    "expects": "address",
    "description": "Generates an HTML address display, with each address component ordered according to the address's locale.\n\n#### Example\n\n```liquid\n\n{{ shop.address | format_address }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/format_address)\n\n",
    "returns": "string",
    "scope": "localization"
  },
  "highlight": {
    "summary": "Wraps all instances of a specific string, within a given string, with an HTML `&lt;strong&gt;` tag with a `class` attribute\nof `highlight`.",
    "expects": "string",
    "description": "Wraps all instances of a specific string, within a given string, with an HTML `&lt;strong&gt;` tag with a `class` attribute\nof `highlight`.\n\n#### Example\n\n```liquid\n\n{% for item in search.results %}\n  {% if item.object_type == 'product' %}\n    {{ item.description | highlight: search.terms }}\n  {% else %}\n    {{ item.content | highlight: search.terms }}\n  {% endif %}\n{% endfor %}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/highlight)\n\n",
    "returns": "string",
    "scope": "html"
  },
  "pluralize": {
    "summary": "Outputs the singular or plural version of a string based on a given number.",
    "expects": "number",
    "description": "Outputs the singular or plural version of a string based on a given number.\n\n> Caution:\n> The `pluralize` filter applies English pluralization rules to determine which string to output. You shouldn't use this\n> filter on non-English strings because it could lead to incorrect pluralizations.\n\n#### Example\n\n```liquid\n\nCart item count: {{ cart.item_count }} {{ cart.item_count | pluralize: 'item', 'items' }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/pluralize)\n\n",
    "returns": "string"
  },
  "article_img_url": {
    "summary": "Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for an [article's image](/docs/api/liquid/objects/article#article-image).",
    "expects": "variable",
    "deprecated": true,
    "description": "⚠️ **DEPRECATED** ⚠️\n\nThe `article_img_url` filter has been replaced by [`image_url`](/docs/api/liquid/filters/image_url).\n\n---\n\nReturns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for an [article's image](/docs/api/liquid/objects/article#article-image).\n\n#### Example\n\n```liquid\n\n{{ article.image | article_img_url }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/article_img_url)\n\n",
    "returns": "string",
    "scope": "media"
  },
  "asset_img_url": {
    "summary": "Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for an image in the\n[`assets` directory](/themes/architecture#assets) of a theme.",
    "expects": "string",
    "description": "Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for an image in the\n[`assets` directory](/themes/architecture#assets) of a theme.\n\n#### Example\n\n```liquid\n\n{{ 'red-and-black-bramble-berries.jpg' | asset_img_url }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/asset_img_url)\n\n",
    "returns": "string",
    "scope": "hosted_file"
  },
  "asset_url": {
    "summary": "Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for a file in the\n[`assets` directory](/themes/architecture#assets) of a theme.",
    "expects": "string",
    "description": "Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for a file in the\n[`assets` directory](/themes/architecture#assets) of a theme.\n\n#### Example\n\n```liquid\n\n{{ 'cart.js' | asset_url }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/asset_url)\n\n",
    "returns": "string",
    "scope": "hosted_file"
  },
  "collection_img_url": {
    "summary": "Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for a [collection's image](/docs/api/liquid/objects/collection#collection-image).",
    "expects": "variable",
    "deprecated": true,
    "description": "⚠️ **DEPRECATED** ⚠️\n\nThe `collection_img_url` filter has been replaced by [`image_url`](/docs/api/liquid/filters/image_url).\n\n---\n\nReturns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for a [collection's image](/docs/api/liquid/objects/collection#collection-image).\n\n#### Example\n\n```liquid\n\n{{ collection.image | collection_img_url }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/collection_img_url)\n\n",
    "returns": "string",
    "scope": "media"
  },
  "file_img_url": {
    "summary": "Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for an image from the\n[Files](https://www.shopify.com/admin/settings/files) page of the Shopify admin.",
    "expects": "string",
    "description": "Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for an image from the\n[Files](https://www.shopify.com/admin/settings/files) page of the Shopify admin.\n\n#### Example\n\n```liquid\n\n{{ 'potions-header.png' | file_img_url }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/file_img_url)\n\n",
    "returns": "string",
    "scope": "hosted_file"
  },
  "file_url": {
    "summary": "Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for a file from the\n[Files](https://www.shopify.com/admin/settings/files) page of the Shopify admin.",
    "expects": "string",
    "description": "Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for a file from the\n[Files](https://www.shopify.com/admin/settings/files) page of the Shopify admin.\n\n#### Example\n\n```liquid\n\n{{ 'disclaimer.pdf' | file_url }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/file_url)\n\n",
    "returns": "string",
    "scope": "hosted_file"
  },
  "global_asset_url": {
    "summary": "Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for a global asset.",
    "expects": "string",
    "description": "Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for a global asset. Global assets are kept in a directory on Shopify's server. Using global assets can be faster than loading the resource\ndirectly.\n\nDepending on the resource type, you might need to use an additional filter to load the resource. The following table\noutlines which filter to use for specific resource types.\n\n| Resource type | Additional filter |\n| --- | --- |\n| JavaScript (`.js`) | [`script_tag`](/docs/api/liquid/filters/script_tag) |\n| CSS (`.css`) | [`stylesheet_tag`](/docs/api/liquid/filters/stylesheet_tag)  |\n\nThe following table outlines the available global assets:\n\n| Category | Assets |\n| --- | --- |\n| Firebug | - `firebug/firebug.css`<br>- `firebug/firebug.html`<br>- `firebug/firebug.js`<br>- `firebug/firebugx.js`<br>- `firebug/errorIcon.png`<br>- `firebug/infoIcon.png`<br>- `firebug/warningIcon.png` |\n| JavaScript libraries | - `controls.js`<br>- `dragdrop.js`<br>- `effects.js`<br>- `ga.js`<br>- `mootools.js` |\n| Lightbox | - `lightbox.css`<br>- `lightbox.js`<br><br>- `lightbox/v1/lightbox.css`<br>- `lightbox/v1/lightbox.js`<br><br>- `lightbox/v2/lightbox.css`<br>- `lightbox/v2/lightbox.js`<br>- `lightbox/v2/close.gif`<br>- `lightbox/v2/loading.gif`<br>- `lightbox/v2/overlay.png`<br>- `lightbox/v2/zoom-lg.gif`<br><br>- `lightbox/v204/lightbox.css`<br>- `lightbox/v204/lightbox.js`<br>- `lightbox/v204/bullet.gif`<br>- `lightbox/v204/close.gif`<br>- `lightbox/v204/closelabel.gif`<br>- `lightbox/v204/donatebutton.gif`<br>- `lightbox/v204/downloadicon.gif`<br>- `lightbox/v204/loading.gif`<br>- `lightbox/v204/nextlabel.png`<br>- `lightbox/v204/prevlabel.gif` |\n| Prototype | - `prototype.js`<br>- `prototype/1.5/prototype.js`<br>- `prototype/1.6/prototype.js` |\n| script.aculo.us | - `scriptaculous/1.8.2/scriptaculous.js`<br>- `scriptaculous/1.8.2/builder.js`<br>- `scriptaculous/1.8.2/controls.js`<br>- `scriptaculous/1.8.2/dragdrop.js`<br>- `scriptaculous/1.8.2/effects.js`<br>- `scriptaculous/1.8.2/slider.js`<br>- `scriptaculous/1.8.2/sound.js`<br>- `scriptaculous/1.8.2/unittest.js` |\n| Shopify | - `list-collection.css`<br>- `textile.css` |\n\n#### Example\n\n```liquid\n\n{{ 'lightbox.js' | global_asset_url | script_tag }}\n\n{{ 'lightbox.css' | global_asset_url | stylesheet_tag }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/global_asset_url)\n\n",
    "returns": "string",
    "scope": "hosted_file"
  },
  "image_url": {
    "summary": "Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for an image.",
    "expects": "variable",
    "description": "Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for an image. You can use the `image_url` filter on the following objects, as well as their `src` property:\n\n- [`article`](/docs/api/liquid/objects/article)\n- [`collection`](/docs/api/liquid/objects/collection)\n- [`image`](/docs/api/liquid/objects/image)\n- [`line_item`](/docs/api/liquid/objects/line_item)\n- [`product`](/docs/api/liquid/objects/product)\n- [`variant`](/docs/api/liquid/objects/variant)\n\n> Caution:\n> You need to specify either a [`width`](/docs/api/liquid/filters/image_url#image_url-width) or\n> [`height`](/docs/api/liquid/filters/image_url#image_url-height) parameter. If neither are specified, then an error is returned.\n\n**Note**\n\n> Regardless of the specified dimensions, an image can never be resized to be larger than its original dimensions.\n\n#### Example\n\n```liquid\n\n{{ product | image_url: width: 450 }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/image_url)\n\n",
    "returns": "string",
    "scope": "media"
  },
  "img_tag": {
    "summary": "Generates an HTML `&lt;img&gt;` tag for a given image URL.",
    "expects": "string",
    "deprecated": true,
    "description": "⚠️ **DEPRECATED** ⚠️\n\nThe `img_tag` filter has been replaced by [`image_tag`](/docs/api/liquid/filters/image_tag).\n\n---\n\nGenerates an HTML `&lt;img&gt;` tag for a given image URL. You can also use the `img_tag` filter on the following objects:\n\n- [`article`](/docs/api/liquid/objects/article)\n- [`collection`](/docs/api/liquid/objects/collection)\n- [`image`](/docs/api/liquid/objects/image)\n- [`line_item`](/docs/api/liquid/objects/line_item)\n- [`product`](/docs/api/liquid/objects/product)\n- [`variant`](/docs/api/liquid/objects/variant)\n\n#### Example\n\n```liquid\n\n{{ product | img_tag }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/img_tag)\n\n",
    "returns": "string",
    "scope": "media"
  },
  "img_url": {
    "summary": "Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for an image.",
    "expects": "variable",
    "deprecated": true,
    "description": "⚠️ **DEPRECATED** ⚠️\n\nThe `img_url` filter has been replaced by [`image_url`](/docs/api/liquid/filters/image_url).\n\n---\n\nReturns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for an image. You can use the `img_url` filter on the following objects:\n\n- [`article`](/docs/api/liquid/objects/article)\n- [`collection`](/docs/api/liquid/objects/collection)\n- [`image`](/docs/api/liquid/objects/image)\n- [`line_item`](/docs/api/liquid/objects/line_item)\n- [`product`](/docs/api/liquid/objects/product)\n- [`variant`](/docs/api/liquid/objects/variant)\n\n#### Example\n\n```liquid\n\n{{ product | img_url }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/img_url)\n\n",
    "returns": "string",
    "scope": "media"
  },
  "link_to": {
    "summary": "Generates an HTML `&lt;a&gt;` tag.",
    "expects": "string",
    "description": "Generates an HTML `&lt;a&gt;` tag.\n\n#### Example\n\n```liquid\n\n{{ 'Shopify' | link_to: 'https://www.shopify.com' }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/link_to)\n\n",
    "returns": "string",
    "scope": "html"
  },
  "payment_type_img_url": {
    "summary": "Returns the URL for an SVG image of a given [payment type](/docs/api/liquid/objects/shop#shop-enabled_payment_types).",
    "expects": "type",
    "description": "Returns the URL for an SVG image of a given [payment type](/docs/api/liquid/objects/shop#shop-enabled_payment_types).\n\n#### Example\n\n```liquid\n\n{% for type in shop.enabled_payment_types %}\n<img src=\"{{ type | payment_type_img_url }}\" />\n{% endfor %}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/payment_type_img_url)\n\n",
    "returns": "string",
    "scope": "payment"
  },
  "payment_type_svg_tag": {
    "summary": "Generates an HTML `&lt;svg&gt;` tag for a given [payment type](/docs/api/liquid/objects/shop#shop-enabled_payment_types).",
    "expects": "type",
    "description": "Generates an HTML `&lt;svg&gt;` tag for a given [payment type](/docs/api/liquid/objects/shop#shop-enabled_payment_types).\n\n#### Example\n\n```liquid\n\n{% for type in shop.enabled_payment_types -%}\n  {{ type | payment_type_svg_tag }}\n{% endfor %}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/payment_type_svg_tag)\n\n",
    "returns": "string",
    "scope": "payment"
  },
  "placeholder_svg_tag": {
    "summary": "Generates an HTML `&lt;svg&gt;` tag for a given placeholder name.",
    "expects": "string",
    "description": "Generates an HTML `&lt;svg&gt;` tag for a given placeholder name. Accepts the following placeholder names:\n\n- `collection-1`\n- `collection-2`\n- `collection-3`\n- `collection-4`\n- `collection-5`\n- `collection-6`\n- `image`\n- `lifestyle-1`\n- `lifestyle-2`\n- `product-1`\n- `product-2`\n- `product-3`\n- `product-4`\n- `product-5`\n- `product-6`\n\n#### Example\n\n```liquid\n\n{{ 'collection-1' | placeholder_svg_tag }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/placeholder_svg_tag)\n\n",
    "returns": "string",
    "scope": "html"
  },
  "preload_tag": {
    "summary": "Generates an HTML `&lt;link&gt;` tag with a `rel` attribute of `preload` to prioritize loading a given Shopify-hosted asset.\nThe asset URL is also added to the [Link header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link)\nwith a `rel` attribute of `preload`.",
    "expects": "string",
    "description": "Generates an HTML `&lt;link&gt;` tag with a `rel` attribute of `preload` to prioritize loading a given Shopify-hosted asset.\nThe asset URL is also added to the [Link header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link)\nwith a `rel` attribute of `preload`. You should use this filter sparingly. For example, consider preloading only resources necessary for rendering\nabove-the-fold content. To learn more about preloading resources, refer to\n[Performance best practices for Shopify themes](/themes/best-practices/performance#preload-key-resources-defer-or-avoid-loading-others).\n\n**Tip**\n\n> If you want to preload a stylesheet, then use [`stylesheet_tag`](/docs/api/liquid/filters/stylesheet_tag). If you want to\n> preload an image, then use [`image_tag`](/docs/api/liquid/filters/image_tag).\n\nThe input to this filter must be a URL from one of the following filters:\n\n- [`asset_url`](/docs/api/liquid/filters/asset_url)\n- [`global_asset_url`](/docs/api/liquid/filters/global_asset_url)\n- [`shopify_asset_url`](/docs/api/liquid/filters/shopify_asset_url)\n\nThe `preload_tag` filter also requires an [`as` parameter](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-as)\nbased on the kind of resource being preloaded.\n\n#### Example\n\n```liquid\n\n{{ 'cart.js' | asset_url | preload_tag: as: 'script' }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/preload_tag)\n\n",
    "returns": "string",
    "scope": "html"
  },
  "product_img_url": {
    "summary": "Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for a [product image](/docs/api/liquid/objects/product).",
    "expects": "variable",
    "deprecated": true,
    "description": "⚠️ **DEPRECATED** ⚠️\n\nThe `product_img_url` filter has been replaced by [`image_url`](/docs/api/liquid/filters/image_url).\n\n---\n\nReturns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for a [product image](/docs/api/liquid/objects/product). This can be the product's `featured_image` or any image from the `images` array.\n\n#### Example\n\n```liquid\n\n{{ product.featured_image | product_img_url }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/product_img_url)\n\n",
    "returns": "string",
    "scope": "media"
  },
  "script_tag": {
    "summary": "Generates an HTML `&lt;script&gt;` tag for a given resource URL. The tag has a `type` attribute of `text/javascript`.",
    "expects": "string",
    "description": "Generates an HTML `&lt;script&gt;` tag for a given resource URL. The tag has a `type` attribute of `text/javascript`.\n\n#### Example\n\n```liquid\n\n{{ 'cart.js' | asset_url | script_tag }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/script_tag)\n\n",
    "returns": "string",
    "scope": "html"
  },
  "shopify_asset_url": {
    "summary": "Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for a globally accessible Shopify asset.",
    "expects": "string",
    "description": "Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for a globally accessible Shopify asset. The following are the globally accessible Shopify assets:\n\n- `option_selection.js`\n- `api.jquery.js`\n- `shopify_common.js`\n- `customer_area.js`\n- `currencies.js`\n- `customer.css`\n\n#### Example\n\n```liquid\n\n{{ 'option_selection.js' | shopify_asset_url }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/shopify_asset_url)\n\n",
    "returns": "string",
    "scope": "hosted_file"
  },
  "stylesheet_tag": {
    "summary": "Generates an HTML `&lt;link&gt;` tag for a given resource URL. The tag has the following parameters:\n\n| Attribute | Value |\n| --- | --- |\n| `rel` | `stylesheet` |\n| `type` | `text/css` |\n| `media` | `all` |",
    "expects": "string",
    "description": "Generates an HTML `&lt;link&gt;` tag for a given resource URL. The tag has the following parameters:\n\n| Attribute | Value |\n| --- | --- |\n| `rel` | `stylesheet` |\n| `type` | `text/css` |\n| `media` | `all` |\n\n#### Example\n\n```liquid\n\n{{ 'base.css' | asset_url | stylesheet_tag }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/stylesheet_tag)\n\n",
    "returns": "string",
    "scope": "html"
  },
  "weight_with_unit": {
    "summary": "Generates a formatted weight for a [`variant` object](/docs/api/liquid/objects/variant#variant-weight). The weight unit is\nset in the [general settings](https://www.shopify.com/admin/settings/general) in the Shopify admin.",
    "expects": "number",
    "description": "Generates a formatted weight for a [`variant` object](/docs/api/liquid/objects/variant#variant-weight). The weight unit is\nset in the [general settings](https://www.shopify.com/admin/settings/general) in the Shopify admin.\n\n#### Example\n\n```liquid\n\n{%- assign variant = product.variants.first -%}\n\n{{ variant.weight | weight_with_unit }}\n\n```\n\n---\n\n[Shopify Documentation](https://shopify.dev/docs/api/liquid/filters/weight_with_unit)\n\n",
    "returns": "string",
    "scope": "format"
  }
}